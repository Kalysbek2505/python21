'Наследование - принцип  ООП, где мв можем в дочернем классе унаследовать переопределять и использовать все аттрибуты и методы родительского класса'

class A:
    def method(self):
        print('it is method in class A')

obj_a = A()
obj_a.method()


class B(A):
    '''Наследовали все методы и атрибуты у класса А'''
obj_b = B()
obj_b.method()

'class A - Родительский класс'
'class B - дочерний класс'

class C(A):
    '''Наследовали все методы и аттрибуты у класса А и переопредили метод method'''
    def method(self):
        print('it is method in class C')
obj_c = C()
obj_c.method()
'Переопределение - даем то же названиеб но другое значение'

'super() - функция позваляет обратиться к родительскому классу и вызввать определенные методы или аттрибуты'
class A:
    def my_range(self, n):
        return list(range(0, n+1))

class B(A):
    def my_range(self):
        # через super мы обращаемся к методу родительского класса
        return super().my_range(10)

'===========Виды наследования================='
# одиночное наследование
# множественное наследование
# многоуровневая наследование
#иерархическое наследование
# гибридное наследование

'=================Множественное наследование============================='
"==================множоственное наследование======================="
# множественное наследование - наследование от 2 или более классов

class A:
    a = 'a'
class B:
    b = 'b'
class C(A,B):
    """наследование от 2 классов А и В """
    c = 'c'

obj_c = C()
obj_c.a # 'a'
obj_c.b # 'b'
obj_c.c  # 'c'
